using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using ICSharpCode.SharpZipLib.Checksum;
using ICSharpCode.SharpZipLib.Zip;

namespace httpServer
{
    class Log
    {
        enum MyLogLevel
        {
            LOG_DEBUG = 0,
            LOG_INFO,
            LOG_WARNING,
            LOG_ERROR,
            LOG_NOWRITE
        }

        /// <summary>
        /// Log文件最大字节数，单位(字节)
        /// </summary>
        static public int MaxLogFileSize = 1000000; //1M

        /// <summary>
        /// Log 打印级别
        /// </summary>
        static private MyLogLevel logLevel = MyLogLevel.LOG_DEBUG;

        private static readonly object locker1 = new object();

        public static void SetLogLevel(String level)
        {
            if (String.Compare(level,"debug", true) == 0)
            {
                logLevel = MyLogLevel.LOG_DEBUG;
            }
            else if (String.Compare(level, "info", true) == 0)
            {
                logLevel = MyLogLevel.LOG_INFO;
            }
            else if (String.Compare(level, "warning", true) == 0)
            {
                logLevel = MyLogLevel.LOG_WARNING;
            }
            else if (String.Compare(level, "error", true) == 0)
            {
                logLevel = MyLogLevel.LOG_ERROR;
            }
            else if (String.Compare(level, "nowrite", true) == 0)
            {
                logLevel = MyLogLevel.LOG_NOWRITE;
            }
            else
            {
                logLevel = MyLogLevel.LOG_DEBUG;
            }
        }

        public static void WriteCrash(Exception ex)
        {
            string log_folder = AppDomain.CurrentDomain.BaseDirectory + "Log";
            string filePath = log_folder + "\\Crash.log";
            if (!System.IO.Directory.Exists(log_folder))
            {
                System.IO.Directory.CreateDirectory(log_folder);
            }
            if (!System.IO.File.Exists(filePath))
            {
                System.IO.File.Create(filePath).Close();
            }

            MessageBox.Show("发生Crash。" + ex.Message);

            System.IO.StreamWriter sw = System.IO.File.AppendText(filePath);
            sw.WriteLine("-----------------------------------------------");
            sw.WriteLine("Date:" + DateTime.Now.ToShortDateString() + "-" + DateTime.Now.ToLongTimeString());
            sw.WriteLine(ex.Message);
            sw.WriteLine(ex.StackTrace);
            sw.WriteLine("-----------------------------------------------");
            sw.Close();
        }

        private static void Write(String msg,bool addTimestamp)
        {
            string log_folder = AppDomain.CurrentDomain.BaseDirectory + "Log";
            string filePath = log_folder + "\\Run.log";
            lock (locker1)
            {
                if (!System.IO.Directory.Exists(log_folder))
                {
                    System.IO.Directory.CreateDirectory(log_folder);
                }
                if (!System.IO.File.Exists(filePath))
                {
                    System.IO.File.Create(filePath).Close();
                }

                String outStr = "";
                if (addTimestamp)
                    outStr = String.Format("[{0}-{1}] {2}", DateTime.Now.ToShortDateString(), DateTime.Now.ToLongTimeString(), msg);
                else
                    outStr =  msg;
                //MessageBox.Show(outStr);

                //压缩文件(大于1M时压缩)
                FileInfo fileInfo = new FileInfo(filePath);
                if (fileInfo.Length > MaxLogFileSize)
                {
                    string zipfilePath = string.Format("{0}\\Log_{1:yyyyMMddHHmmss}-{2:yyyyMMddHHmmss}.zip",
                        log_folder, fileInfo.CreationTime, DateTime.Now);
                    ZipHelper.ZipFile(filePath, zipfilePath, null);

                    File.Delete(filePath);
                    System.IO.File.Create(filePath).Close();
                }


                System.IO.StreamWriter sw = System.IO.File.AppendText(filePath);
                sw.WriteLine(outStr);
                sw.Close();
            }

        }

        /// <summary>
        /// 向LOG文件写入调试级别打印，加时间戳
        /// </summary>
        /// <param name="message">写入的内容</param>
        public static void WriteDebug(string message)
        {
            WriteDebug(message,true);
        }
        /// <summary>
        /// 向LOG文件写入调试级别打印
        /// </summary>
        /// <param name="message">写入的内容</param>
        /// <param name="addTimestamp">true:加入时间戳；false:不加入时间戳</param>
        public static void WriteDebug(string message ,bool addTimestamp)
        {
            if (logLevel > MyLogLevel.LOG_DEBUG)
            {
                return;
            }
            else
            {
                Write("调试:" + message, addTimestamp);
            }
        }

        /// <summary>
        /// 向LOG文件写入正常级别打印，加时间戳
        /// </summary>
        /// <param name="message">写入的内容</param>
        public static void WriteInfo(string message)
        {
            WriteInfo(message, true);
        }
        /// <summary>
        /// 向LOG文件写入正常级别打印
        /// </summary>
        /// <param name="message">写入的内容</param>
        /// <param name="addTimestamp">true:加入时间戳；false:不加入时间戳</param>
        public static void WriteInfo(string message, bool addTimestamp)
        {
            if (logLevel > MyLogLevel.LOG_INFO)
            {
                return;
            }
            else
            {
                Write(message, addTimestamp);
            }
        }

        /// <summary>
        /// 向LOG文件写入警告级别打印，加时间戳
        /// </summary>
        /// <param name="message">写入的内容</param>
        public static void WriteWarning(string message)
        {
            WriteWarning(message, true);
        }
        /// <summary>
        /// 向LOG文件写入警告级别打印
        /// </summary>
        /// <param name="message">写入的内容</param>
        /// <param name="addTimestamp">true:加入时间戳；false:不加入时间戳</param>
        public static void WriteWarning(string message, bool addTimestamp)
        {
            if (logLevel > MyLogLevel.LOG_WARNING)
            {
                return;
            }
            else
            {
                Write("警告:" + message, addTimestamp);
            }
        }

        /// <summary>
        /// 向LOG文件写入错误级别打印，加时间戳
        /// </summary>
        /// <param name="message">写入的内容</param>
        public static void WriteError(string message)
        {
            WriteError(message, true);
        }
        /// <summary>
        /// 向LOG文件写入错误级别打印
        /// </summary>
        /// <param name="message">写入的内容</param>
        /// <param name="addTimestamp">true:加入时间戳；false:不加入时间戳</param>
        public static void WriteError(string message, bool addTimestamp)
        {
            if (logLevel > MyLogLevel.LOG_ERROR)
            {
                return;
            }
            else
            {
                Write("错误:" + message , addTimestamp);
            }
        }
    }

    #region  ZIP文件压缩

    /// <summary>   
    /// 适用与ZIP压缩   
    /// </summary>   
    public class ZipHelper
    {
        #region 压缩  

        /// <summary>   
        /// 递归压缩文件夹的内部方法   
        /// </summary>   
        /// <param name="folderToZip">要压缩的文件夹路径</param>   
        /// <param name="zipStream">压缩输出流</param>   
        /// <param name="parentFolderName">此文件夹的上级文件夹</param>   
        /// <returns></returns>   
        private static bool ZipDirectory(string folderToZip, ZipOutputStream zipStream, string parentFolderName)
        {
            bool result = true;
            string[] folders, files;
            ZipEntry ent = null;
            FileStream fs = null;
            Crc32 crc = new Crc32();

            try
            {
                ent = new ZipEntry(Path.Combine(parentFolderName, Path.GetFileName(folderToZip) + "/"));
                zipStream.PutNextEntry(ent);
                zipStream.Flush();

                files = Directory.GetFiles(folderToZip);
                foreach (string file in files)
                {
                    fs = File.OpenRead(file);

                    byte[] buffer = new byte[fs.Length];
                    fs.Read(buffer, 0, buffer.Length);
                    ent = new ZipEntry(Path.Combine(parentFolderName, Path.GetFileName(folderToZip) + "/" + Path.GetFileName(file)));
                    ent.DateTime = DateTime.Now;
                    ent.Size = fs.Length;

                    fs.Close();

                    crc.Reset();
                    crc.Update(buffer);

                    ent.Crc = crc.Value;
                    zipStream.PutNextEntry(ent);
                    zipStream.Write(buffer, 0, buffer.Length);
                }

            }
            catch
            {
                result = false;
            }
            finally
            {
                if (fs != null)
                {
                    fs.Close();
                    fs.Dispose();
                }
                if (ent != null)
                {
                    ent = null;
                }
                GC.Collect();
                GC.Collect(1);
            }

            folders = Directory.GetDirectories(folderToZip);
            foreach (string folder in folders)
                if (!ZipDirectory(folder, zipStream, folderToZip))
                    return false;

            return result;
        }

        /// <summary>   
        /// 压缩文件夹    
        /// </summary>   
        /// <param name="folderToZip">要压缩的文件夹路径</param>   
        /// <param name="zipedFile">压缩文件完整路径</param>   
        /// <param name="password">密码</param>   
        /// <returns>是否压缩成功</returns>   
        public static bool ZipDirectory(string folderToZip, string zipedFile, string password)
        {
            bool result = false;
            if (!Directory.Exists(folderToZip))
                return result;

            ZipOutputStream zipStream = new ZipOutputStream(File.Create(zipedFile));
            zipStream.SetLevel(6);
            if (!string.IsNullOrEmpty(password)) zipStream.Password = password;

            result = ZipDirectory(folderToZip, zipStream, "");

            zipStream.Finish();
            zipStream.Close();

            return result;
        }

        /// <summary>   
        /// 压缩文件夹   
        /// </summary>   
        /// <param name="folderToZip">要压缩的文件夹路径</param>   
        /// <param name="zipedFile">压缩文件完整路径</param>   
        /// <returns>是否压缩成功</returns>   
        public static bool ZipDirectory(string folderToZip, string zipedFile)
        {
            bool result = ZipDirectory(folderToZip, zipedFile, null);
            return result;
        }

        /// <summary>   
        /// 压缩文件   
        /// </summary>   
        /// <param name="fileToZip">要压缩的文件全名</param>   
        /// <param name="zipedFile">压缩后的文件名</param>   
        /// <param name="password">密码</param>   
        /// <returns>压缩结果</returns>   
        public static bool ZipFile(string fileToZip, string zipedFile, string password)
        {
            bool result = true;
            ZipOutputStream zipStream = null;
            FileStream fs = null;
            ZipEntry ent = null;

            if (!File.Exists(fileToZip))
                return false;

            try
            {
                fs = File.OpenRead(fileToZip);
                byte[] buffer = new byte[fs.Length];
                fs.Read(buffer, 0, buffer.Length);
                fs.Close();

                fs = File.Create(zipedFile);
                zipStream = new ZipOutputStream(fs);
                if (!string.IsNullOrEmpty(password)) zipStream.Password = password;
                ent = new ZipEntry(Path.GetFileName(fileToZip));
                zipStream.PutNextEntry(ent);
                zipStream.SetLevel(6);

                zipStream.Write(buffer, 0, buffer.Length);

            }
            catch
            {
                result = false;
            }
            finally
            {
                if (zipStream != null)
                {
                    zipStream.Finish();
                    zipStream.Close();
                }
                if (ent != null)
                {
                    ent = null;
                }
                if (fs != null)
                {
                    fs.Close();
                    fs.Dispose();
                }
            }
            GC.Collect();
            GC.Collect(1);

            return result;
        }

        /// <summary>   
        /// 压缩文件   
        /// </summary>   
        /// <param name="fileToZip">要压缩的文件全名</param>   
        /// <param name="zipedFile">压缩后的文件名</param>   
        /// <returns>压缩结果</returns>   
        public static bool ZipFile(string fileToZip, string zipedFile)
        {
            bool result = ZipFile(fileToZip, zipedFile, null);
            return result;
        }

        /// <summary>   
        /// 压缩文件或文件夹   
        /// </summary>   
        /// <param name="fileToZip">要压缩的路径</param>   
        /// <param name="zipedFile">压缩后的文件名</param>   
        /// <param name="password">密码</param>   
        /// <returns>压缩结果</returns>   
        public static bool Zip(string fileToZip, string zipedFile, string password)
        {
            bool result = false;
            if (Directory.Exists(fileToZip))
                result = ZipDirectory(fileToZip, zipedFile, password);
            else if (File.Exists(fileToZip))
                result = ZipFile(fileToZip, zipedFile, password);

            return result;
        }

        /// <summary>   
        /// 压缩文件或文件夹   
        /// </summary>   
        /// <param name="fileToZip">要压缩的路径</param>   
        /// <param name="zipedFile">压缩后的文件名</param>   
        /// <returns>压缩结果</returns>   
        public static bool Zip(string fileToZip, string zipedFile)
        {
            bool result = Zip(fileToZip, zipedFile, null);
            return result;

        }

        #endregion

        #region 解压  

        /// <summary>   
        /// 解压功能(解压压缩文件到指定目录)   
        /// </summary>   
        /// <param name="fileToUnZip">待解压的文件</param>   
        /// <param name="zipedFolder">指定解压目标目录</param>   
        /// <param name="password">密码</param>   
        /// <returns>解压结果</returns>   
        public static bool UnZip(string fileToUnZip, string zipedFolder, string password)
        {
            bool result = true;
            FileStream fs = null;
            ZipInputStream zipStream = null;
            ZipEntry ent = null;
            string fileName;

            if (!File.Exists(fileToUnZip))
                return false;

            if (!Directory.Exists(zipedFolder))
                Directory.CreateDirectory(zipedFolder);

            try
            {
                zipStream = new ZipInputStream(File.OpenRead(fileToUnZip));
                if (!string.IsNullOrEmpty(password)) zipStream.Password = password;
                while ((ent = zipStream.GetNextEntry()) != null)
                {
                    if (!string.IsNullOrEmpty(ent.Name))
                    {
                        fileName = Path.Combine(zipedFolder, ent.Name);
                        fileName = fileName.Replace('/', '\\');//change by Mr.HopeGi   

                        if (fileName.EndsWith("\\"))
                        {
                            Directory.CreateDirectory(fileName);
                            continue;
                        }

                        fs = File.Create(fileName);
                        int size = 2048;
                        byte[] data = new byte[size];
                        while (true)
                        {
                            size = zipStream.Read(data, 0, data.Length);
                            if (size > 0)
                                fs.Write(data, 0, data.Length);
                            else
                                break;
                        }
                    }
                }
            }
            catch
            {
                result = false;
            }
            finally
            {
                if (fs != null)
                {
                    fs.Close();
                    fs.Dispose();
                }
                if (zipStream != null)
                {
                    zipStream.Close();
                    zipStream.Dispose();
                }
                if (ent != null)
                {
                    ent = null;
                }
                GC.Collect();
                GC.Collect(1);
            }
            return result;
        }

        /// <summary>   
        /// 解压功能(解压压缩文件到指定目录)   
        /// </summary>   
        /// <param name="fileToUnZip">待解压的文件</param>   
        /// <param name="zipedFolder">指定解压目标目录</param>   
        /// <returns>解压结果</returns>   
        public static bool UnZip(string fileToUnZip, string zipedFolder)
        {
            bool result = UnZip(fileToUnZip, zipedFolder, null);
            return result;
        }

        #endregion
    }
    #endregion

}
