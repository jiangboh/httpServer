using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Xml;
using System.Web;

namespace httpServer
{
    class HttpHandle
    {
        //static public List<SnIpPortNode> snList;
        
        /// <summary>
        /// 作为客户端向AP发送连接请求
        /// </summary>
        /// <param name="urlInfo">AP反向连接地址信息</param>
        static public void postUrl2Ap(ConnectUrlInfo urlInfo)
        {
            if (urlInfo.Url.Length <= 0)
            {
                //Log.WriteWarning("该AP的反向连接地址为空!");
                return;
            }
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(urlInfo.Url);
            request.Method = "GET";
            request.Credentials = new NetworkCredential(urlInfo.Name, urlInfo.Passwd);
            request.KeepAlive = true;

            try
            {
                WebResponse response = request.GetResponse();
                using (StreamReader reader = new StreamReader(response.GetResponseStream()))
                {
                    while (reader.Peek() != -1)
                    {
                        Console.WriteLine(reader.ReadLine());
                    }

                }
            }
            catch (Exception ex)
            {
                Log.WriteError("postUrl2Ap:" + ex.Message);
            }
        }

        /// <summary>
        /// 创建http Server线程
        /// </summary>
        public void RunHttpServerThread()
        {
            HttpListener httpListenner;
            httpListenner = new HttpListener();
            httpListenner.AuthenticationSchemes = AuthenticationSchemes.Anonymous;

            httpListenner.Prefixes.Add("http://+:8080/");
            try
            {
                httpListenner.Start();
                Log.WriteDebug("Http Server 启动成功!");
            }
            catch (Exception ex)
            {
                Log.WriteCrash(ex);
                GlobalParameter.httpServerRun = false;
            }

            //snList = new List<SnIpPortNode>();

            new Thread(new ThreadStart(delegate {
                try
                {
                    loop(httpListenner);
                }
                catch (Exception ex)
                {
                    Log.WriteCrash(ex);
                    GlobalParameter.httpServerRun = false;
                }
            })).Start();
        }

        /// <summary>
        /// 循环接收处理http消息
        /// </summary>
        /// <param name="httpListenner">http消息参数</param>
        private void loop(HttpListener httpListenner)
        {
            Log.WriteDebug("开始循环接收Http消息...");
            while (GlobalParameter.httpServerRun)
            {
                try
                {
                    HttpListenerContext context = httpListenner.GetContext();
                    HttpListenerRequest request = context.Request;
                    HttpListenerResponse response = context.Response;

                    Servlet servlet = new MyServlet();
                    servlet.onCreate();

                    if (!GlobalParameter.httpServerRun) break;

                    if (request.HttpMethod == "POST")
                    {
                        servlet.onPost(request, response);
                        response.Close();
                    }
                    else if (request.HttpMethod == "GET")
                    {
                        servlet.onGet(request, response);
                        response.Close();
                    }
                    Thread.Sleep(100);//休眠时间
                }
                catch
                {
                    continue;
                }
            }
            httpListenner.Stop();
            Log.WriteError("已关闭Http Server!");
            GlobalParameter.CloseThisApp();
        }

        #region 定义http消息处理类
        public class Servlet
        {
            public virtual void onGet(System.Net.HttpListenerRequest request, System.Net.HttpListenerResponse response) { }
            public virtual void onPost(System.Net.HttpListenerRequest request, System.Net.HttpListenerResponse response) { }
            public virtual void onCreate() { }
        }
        #endregion

        public class MyServlet : HttpHandle.Servlet
        {
            private MySqlDbHelper myDB;// = new MySqlDbHelper();

            public MyServlet()
            {
                this.myDB = new MySqlDbHelper(GlobalParameter.DB_ConnStr);
                if (!myDB.MyDbConnFlag)
                {
                    Log.WriteError("打开数据库失败！" + GlobalParameter.DB_ConnStr);
                    GlobalParameter.httpServerRun = false;
                }
            }

            public override void onCreate()
            {
                base.onCreate();
            }

            /// <summary>
            /// 获取下条要发到AP的消息。
            /// </summary>
            /// <param name="ip">要下发AP的IP地址</param>
            /// <param name="port">要下发AP的端口</param>
            /// <returns>如果有其它任务，返回其它任务XML。否则回复空消息。</returns>
            private byte[] NextSendMsgHandle(String ip,int port)
            {
                byte[] xml;

                ApConnHmsInfo connInfo = GlobalParameter.apConnHmsList.getSnForconnList(ip, port);
                if (connInfo != null)
                {
                    xml = Encoding.UTF8.GetBytes(""); //回复空post
                }
                else
                {
                    TaskType taskType= TaskType.GetLogTask;
                    xml = myDB.GetTaskBySN(ref taskType, connInfo.Sn);
                    if ((xml != null) && (taskType != TaskType.TaskNull))
                    {
                        if(!myDB.SetApTaskStatusBySN(connInfo.Sn, taskType, TaskStatus.SendTask))
                        {
                            string str = String.Format("修改SN({0}),任务类型({1}),任务状态({2})错误！",
                                connInfo.Sn, taskType, TaskStatus.SendTask);
                            Log.WriteError(str);
                        }
                    }  
                }

                return xml;
            }

            /// <summary>
            /// 判断某事件是否在事件列表中
            /// </summary>
            /// <param name="EventList">事件列表</param>
            /// <param name="EventCode">事件</param>
            /// <returns>在事件列表中返回true,否则返回false</returns>
            private bool GetEventInList(String[] EventList, String EventCode)
            {
                bool isIn = false;
                foreach (String code in EventList)
                {
                    if (string.IsNullOrEmpty(code)) break;
                    if (String.Compare(code, EventCode, true) == 0)
                    {
                        isIn = true;
                        break;
                    }
                }
                return isIn;
            }

            /// <summary>
            /// 收到空消息处理过程
            /// </summary>
            /// <param name="ip">发送消息AP的IP</param>
            /// <param name="port">发送消息AP的端口</param>
            /// <returns>如果有下条任务，返回下条任务XML，否则返回空</returns>
            private byte[] RecvEmptyMsgHandle(String ip, int port)
            {
                byte[] xml;

                ApConnHmsInfo connInfo = GlobalParameter.apConnHmsList.getSnForconnList(ip, port);
                if (connInfo == null)
                {
                    xml = Encoding.UTF8.GetBytes(""); //回复空post
                }
                else
                {
                    if (GetEventInList(connInfo.EventCode,InformEventCode.BOOT))
                    {
                        List<XmlParameter> inList = new List<XmlParameter>();
                        System.Data.DataTable dt = myDB.GetInform_1BootTable();
                        for (int i = 0; i < dt.Rows.Count; i++)
                        {
                            XmlParameter xmlParameter = new XmlParameter(dt.Rows[i][0].ToString(),
                                dt.Rows[i][1].ToString());
                            inList.Add(xmlParameter);
                        }

                         xml = XmlHandle.Create_1BOOT_InformResponse(inList);
                        //xml = XmlHandle.CreateRebootXmlFile("reboot1233");
                    }
                    else
                    {
                        TaskType taskType = TaskType.TaskNull;
                        xml = myDB.GetTaskBySN(ref taskType, connInfo.Sn);
                        if ((xml != null) && (taskType != TaskType.TaskNull))
                        {
                            if (!myDB.SetApTaskStatusBySN(connInfo.Sn, taskType, TaskStatus.SendTask))
                            {
                                string str = String.Format("修改SN({0}),任务类型({1}),任务状态({2})！",
                                    connInfo.Sn, taskType, TaskStatus.SendTask);
                                Log.WriteError(str);
                            }
                        }
                        else
                        {
                            xml= Encoding.UTF8.GetBytes(""); //回复空post
                        }
                    }
                }

                return xml;
            }

            public override void onGet(HttpListenerRequest request, HttpListenerResponse response)
            {
                /*
                Console.WriteLine("GET:" + request.Url);
                byte[] buffer = XmlHandle.CreateInformResponseXmlFile();//Encoding.UTF8.GetBytes("OK");

                System.IO.Stream output = response.OutputStream;
                output.Write(buffer, 0, buffer.Length);
                // You must close the output stream.
                output.Close();
                //listener.Stop();
                */
                onPost(request, response);
            }

            /// <summary>
            /// 收到POST消息处理
            /// </summary>
            /// <param name="request">request消息结构</param>
            /// <param name="response">response消息结构</param>
            public override void onPost(HttpListenerRequest request, HttpListenerResponse response)
            {
                
                Console.WriteLine("POST:" + request.Url);

                String ip = request.RemoteEndPoint.Address.ToString();
                int port = request.RemoteEndPoint.Port;

                Log.WriteDebug("收到POST消息:IP=" + ip +";Port=" + port);
                try
                {
                    if (!request.HasEntityBody)
                    {
                        Log.WriteDebug("收到POST消息，消息内容为空!");
                        byte[] xml = RecvEmptyMsgHandle(ip, port);
                        if (xml.Length <= 0)
                        {
                            response.ContentLength64 = 0; //回复空post
                            Log.WriteDebug("收到POST消息，消息内容为空!回复空消息");
                        }
                        else
                        {
                            response.OutputStream.Write(xml, 0, xml.Length);
                            Log.WriteDebug("收到POST消息，消息内容为空!回复消息:\n" + 
                                System.Text.Encoding.Default.GetString(xml));
                        }
                        //MessageBox.Show("yyyy:" + ip + ":" + port + "  " + getSnForSnIpPortNode(ip,port));
                    }
                    else
                    {
                        //接收POST参数
                        Stream stream = request.InputStream;
                        System.IO.StreamReader reader = new System.IO.StreamReader(stream, Encoding.UTF8);
                        //String body = reader.ReadToEnd();
                        XmlParameterStruct parameterStruct = new XmlParameterStruct();
                        parameterStruct = new XmlHandle().HandleRecvApMsg(reader.ReadToEnd());

                        Log.WriteDebug("收到POST消息，消息Method="+ parameterStruct.Method + "!");
                        if (String.Compare(parameterStruct.Method, RPCMethod.Inform, true) == 0)
                        {
                            ApConnHmsInfo connInfo = new ApConnHmsInfo(parameterStruct.xmlInform.SN);
                            connInfo.Ip = request.RemoteEndPoint.Address.ToString();
                            connInfo.Port = request.RemoteEndPoint.Port;
                            connInfo.EventCode = parameterStruct.xmlInform.EventCode;

                            Log.WriteDebug("收到Inform消息，SN = " + connInfo.Sn);
                            foreach(string eventcode in connInfo.EventCode)
                            {
                                if (string.IsNullOrEmpty(eventcode)) break;
                                Log.WriteDebug("消息EventCode = " + eventcode );
                            }
                            GlobalParameter.apConnHmsList.add(connInfo);
                            Log.WriteDebug("设置" + parameterStruct.xmlInform.SN + "为上线状态!");
                            if (!myDB.SetconnHSToOnLine(parameterStruct.xmlInform.SN))
                            {
                                Log.WriteError("设置"+ parameterStruct.xmlInform.SN + "为上线状态失败!");
                            }

                            if (GetEventInList(connInfo.EventCode, InformEventCode.M_Reboot))
                            {
                                string str = String.Format("修改SN({0}),任务类型({1}),任务状态({2})！",
                                        connInfo.Sn, TaskType.RebootTask, TaskStatus.ReponseOk);
                                Log.WriteDebug(str);
                                if (!myDB.SetApTaskStatusBySN(connInfo.Sn, TaskType.RebootTask,
                                                TaskStatus.ReponseOk))
                                {
                                    Log.WriteError(str);
                                }
                            }

                            byte[] res = XmlHandle.CreateInformResponseXmlFile();// Encoding.UTF8.GetBytes("OK");
                            response.OutputStream.Write(res, 0, res.Length);
                            Log.WriteDebug("收到Inform消息，回复消息：\n" + System.Text.Encoding.Default.GetString(res));
                        }
                        else
                        {
                            ApConnHmsInfo connInfo = GlobalParameter.apConnHmsList.getSnForconnList(ip, port);
                            if (connInfo != null)
                            {
                                if (String.Compare(parameterStruct.Method, RPCMethod.GetParameterValuesResponse, true) == 0)
                                {
                                    string str = String.Format("修改SN({0}),任务ID({1}),任务状态({2})！",
                                                connInfo.Sn, parameterStruct.ID, TaskStatus.ReponseOk);
                                    Log.WriteDebug(str);
                                    if (!myDB.SetStatusBySnId(parameterStruct.ID, connInfo.Sn,
                                       TaskStatus.ReponseOk))
                                    {
                                        Log.WriteError(str);
                                    }
                                }
                                else if (String.Compare(parameterStruct.Method, RPCMethod.SetParameterValuesResponse, true) == 0)
                                {
                                    //去掉1Boot的回复。
                                    if (String.Compare(parameterStruct.ID, XmlHandle.SetParameterValueFor1Boot, true) != 0)
                                    {
                                        string str = String.Format("修改SN({0}),任务ID({1}),任务状态({2})！",
                                                    connInfo.Sn, parameterStruct.ID, TaskStatus.ReponseOk);
                                        Log.WriteDebug(str);
                                        if (!myDB.SetStatusBySnId(parameterStruct.ID, connInfo.Sn,
                                            TaskStatus.ReponseOk))
                                        {
                                            Log.WriteError(str);
                                        }
                                    }
                                }
                                else if (String.Compare(parameterStruct.Method, RPCMethod.TransferComplete, true) == 0)
                                {
                                    if (parameterStruct.transferComplete.FaultCode == 0)  //AP返回成功
                                    {
                                        string str = String.Format("修改SN({0}),任务类型({1}),任务状态({2})！",
                                                connInfo.Sn, TaskType.GetLogTask, TaskStatus.ReponseOk);
                                        Log.WriteDebug(str);
                                        if (!myDB.SetApTaskStatusBySN(connInfo.Sn, TaskType.GetLogTask,
                                                TaskStatus.ReponseOk))
                                        {
                                             Log.WriteError(str);
                                        }
                                    }
                                    else
                                    {
                                        string str = String.Format("修改SN({0}),任务类型({1}),任务状态({2})！",
                                                connInfo.Sn, TaskType.GetLogTask, TaskStatus.ReponseFail);
                                        Log.WriteDebug(str);
                                        if (!myDB.SetApTaskStatusBySN(connInfo.Sn, TaskType.GetLogTask,
                                                TaskStatus.ReponseFail))
                                        {
                                            Log.WriteError(str);
                                        }
                                    }
                                }
                                else if (String.Compare(parameterStruct.Method, RPCMethod.RebootResponse, true) == 0)
                                {
                                    string str = String.Format("修改SN({0}),任务ID({1}),任务状态({2})！",
                                                connInfo.Sn, parameterStruct.ID, TaskStatus.SendTask);
                                    Log.WriteDebug(str);
                                    if (!myDB.SetStatusBySnId(parameterStruct.ID, connInfo.Sn,
                                        TaskStatus.SendTask))
                                    {
                                        Log.WriteError(str);
                                    }
                                }
                                else if (String.Compare(parameterStruct.Method, RPCMethod.Fault, true) == 0)
                                {
                                    string str = String.Format("修改SN({0}),任务ID({1}),任务状态({2})！",
                                               connInfo.Sn, parameterStruct.ID, TaskStatus.ReponseFail);
                                    Log.WriteDebug(str);
                                    if (!myDB.SetStatusBySnId(parameterStruct.ID, connInfo.Sn,
                                        TaskStatus.ReponseFail))
                                    {
                                        Log.WriteError(str);
                                    }
                                }
                            }

                            //如果有其它任务，下发其它任务，否则回复空
                            byte[] xml = NextSendMsgHandle(ip, port);
                            if (xml.Length <= 0)
                            {
                                response.ContentLength64 = 0; //回复空post
                            }
                            else
                            {
                                response.OutputStream.Write(xml, 0, xml.Length);
                            }
                        }
                    }
                }
                catch
                {
                    Log.WriteError("处理收到的消息(" + ip + ":" + port + ")处错。");
                }
            }

            


        }
    }
}
